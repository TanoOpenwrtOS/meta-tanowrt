#!/bin/sh
# Copyright (C) 2020-2021 Anton Kikin <a.kikin@tano-systems.com>

BIN_PARTED="/usr/sbin/parted"
BIN_BLOCK="/usr/sbin/block"
BIN_SGDISK="/usr/sbin/sgdisk"
BIN_PARTPROBE="/usr/sbin/partprobe"
BIN_FSCK="/sbin/fsck"
BIN_E2FSCK="/sbin/e2fsck"
BIN_RESIZE2FS="/sbin/resize2fs"
BIN_RESIZEF2FS="/sbin/resize.f2fs"

#
# $1 = disk
# $2 = partition number
#
do_resize_partition() {
	local DISK=$1
	local PARTITION_NUMBER=$2
	local RET=0

	# Resize partition
	${BIN_PARTED} --align none --script /dev/${DISK} resizepart \
		${PARTITION_NUMBER} 100% > /dev/null
	RET=$?

	if [ "${RET}" != "0" ]; then
		echo "overlay-resize: Failed to resize" \
		     "extended partition ${PARTITION_NUMBER} (${RET})" > /dev/kmsg
		return ${RET}
	fi

	echo "overlay-resize: Partition ${PARTITION_NUMBER}" \
	     "resized to fill its full disk size" > /dev/kmsg

	return 0
}

#
# $1 = target variable
# $2 = partition device
#
get_part_disk() {
	local var="${1}"
	local part="${2}"

	part="${part%% *}"
	part="${part##*/}"

	local uevent="/sys/class/block/${part}/../uevent"

	if [ -e "$uevent" ]; then
		while read line; do
			export -n "$line"
		done < "$uevent"

		export -- ${var}="${DEVNAME}"
		return 0
	fi

	return 1
}

do_overlay_resize() {
	. /lib/functions.sh
	. /lib/upgrade/common.sh

	local ROOT_DEVICE=""
	export_bootdevice

	if [ "$?" != "0" ]; then
		echo "overlay-resize: Cannot find boot device" > /dev/kmsg
		return
	fi

	export_partdevice ROOT_DEVICE 0

	if [ "${ROOT_DEVICE}" = "" ]; then
		echo "overlay-resize: Cannot find root device" > /dev/kmsg
		return
	fi

	echo "overlay-resize: Root device ${ROOT_DEVICE}" > /dev/kmsg

	local OVERLAY_INFO=$(${BIN_BLOCK} info | grep "LABEL=\"rootfs_data\"" | grep "${ROOT_DEVICE}")
	local OVERLAY_DEVICE=$(echo "${OVERLAY_INFO}" | awk -F : '{ print $1 }')
	local PARTITION="${OVERLAY_DEVICE#/dev/}"

	local DISK=""
	local RET

	get_part_disk DISK "${PARTITION}"
	RET=$?

	if [ "${PARTITION}" = "" ]; then
		echo "overlay-resize: Cannot find overlay partition" > /dev/kmsg
		return
	fi

	if [ "${RET}" != "0" ] || [ "${DISK}" = "" ]; then
		echo "overlay-resize: Cannot find overlay disk" > /dev/kmsg
		return
	fi

	echo "overlay-resize: Overlay partition /dev/${PARTITION} (disk /dev/${DISK})" > /dev/kmsg

	if [ ! -d "/sys/block/${DISK}/${PARTITION}" ]; then
		echo "overlay-resize: Detected invalid disk or/and partition" > /dev/kmsg
		return
	fi

	local PARTITION_NUMBER=$(cat /sys/block/${DISK}/${PARTITION}/partition)
	local PARTITION_START_S=$(cat /sys/block/${DISK}/${PARTITION}/start)
	local PARTITION_SIZE_S=$(cat /sys/block/${DISK}/${PARTITION}/size)
	local PARTITION_END_S=$(expr ${PARTITION_START_S} + ${PARTITION_SIZE_S} - 1)

	# Disk total size
	local DISK_SIZE_S=$(cat /sys/block/${DISK}/size)
	local TEST_PARTITION_END_S=$(expr ${DISK_SIZE_S} - 128)

	#
	# Detect filesystem
	#
	local PARTITION_FSTYPE=$(echo "${OVERLAY_INFO}" | \
		grep -o "TYPE=\".*\"" | sed 's/.*"\(.*\)"/\1/g')
	local CMD_FSCK=""
	local CMD_RESIZEFS=""

	if [ "${PARTITION_FSTYPE}" = "ext4" ]; then
		echo "overlay-resize: EXT4 filesystem" > /dev/kmsg
		CMD_FSCK="${BIN_E2FSCK} -p -f /dev/${PARTITION}"
		CMD_FSCK_RET_CONTINUE="0 1 2 3 4 5 6 7"
		CMD_RESIZEFS="${BIN_RESIZE2FS} /dev/${PARTITION}"
	elif [ "${PARTITION_FSTYPE}" = "f2fs" ]; then
		echo "overlay-resize: F2FS filesystem" > /dev/kmsg
		CMD_FSCK="${BIN_FSCK}.f2fs -y -v /dev/${PARTITION}"
		CMD_FSCK_RET_CONTINUE="0"
		CMD_RESIZEFS="${BIN_RESIZEF2FS} /dev/${PARTITION}"
	else
		# For unknown/unsupported filesystem
		# we perform only partition resize
		echo "overlay-resize: Unknown/unsupported filesystem (${PARTITION_FSTYPE})" > /dev/kmsg
	fi

	if [ "${CMD_FSCK}" != "" ]; then
		#
		# Check filesystem
		#
		${CMD_FSCK} > /dev/null 2>&1
		RET=$?

		local code
		local error="1"
		for code in ${CMD_FSCK_RET_CONTINUE}; do
			if [ "${RET}" = "${code}" ]; then
				error="0"
				break
			fi
		done

		if [ "${error}" = "1" ]; then
			echo "overlay-resize: Filesystem on /dev/${PARTITION}" \
			     "has unrecoverable errors (${RET})"
			return
		fi

		echo "overlay-resize: Filesystem successfully checked (${RET})" > /dev/kmsg
	fi

	if [ ${PARTITION_END_S} -ge ${TEST_PARTITION_END_S} ]; then
		echo "overlay-resize: Partition /dev/${PARTITION} already resized" > /dev/kmsg
	else
		RET=$(${BIN_SGDISK} -v /dev/${DISK} 2>/dev/null | \
			grep -c "Problem: The secondary header's self-pointer indicates that it doesn't reside")
		if [ "${RET}" != "0" ]; then
			# Relocate secondary GPT header to end of disk
			${BIN_SGDISK} -e /dev/${DISK} > /dev/null
			${BIN_PARTPROBE} > /dev/null
			echo "overlay-resize: Secondary GPT header relocated to end of disk" > /dev/kmsg
		fi

		local EXTENDED_PARTITION_NUMBER=$(${BIN_PARTED} /dev/${DISK} print | grep extended | awk '{ print $1 }')
		if [ -n "${EXTENDED_PARTITION_NUMBER}" ]; then
			if [ ${PARTITION_NUMBER} -gt ${EXTENDED_PARTITION_NUMBER} ]; then
				# Resize extended partition
				do_resize_partition ${DISK} ${EXTENDED_PARTITION_NUMBER} || return
			fi
		fi

		# Resize partition
		do_resize_partition ${DISK} ${PARTITION_NUMBER} || return

		echo "overlay-resize: Partition /dev/${PARTITION} end" \
		     "sector ${PARTITION_END_S} -> 100% (${TEST_PARTITION_END_S})" > /dev/kmsg
	fi

	if [ "${CMD_RESIZEFS}" != "" ]; then
		#
		# Resize filesystem
		#
		echo "overlay-resize: Resizing filesystem" \
		     "on partition /dev/${PARTITION}..." > /dev/kmsg
		${CMD_RESIZEFS} > /dev/null 2>&1
		RET=$?

		if [ "${RET}" != "0" ]; then
			echo "overlay-resize: Failed to resize" \
			     "filesystem on /dev/${PARTITION} (${RET})" > /dev/kmsg
			return
		fi

		echo "overlay-resize: Filesystem resized" > /dev/kmsg
	fi
}

[ "$INITRAMFS" = "1" ] || boot_hook_add preinit_main do_overlay_resize
